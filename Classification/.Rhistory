grdInBeat <- subset(grdInBeat,select=c("BEAT","X_COORD","Y_COORD"))
NumGrdinBeat <- as.data.frame(table(grdInBeat$BEAT))
names(NumGrdinBeat) <- c("BEAT","NumGrd")
for (i in 1:nrow(NumGrdinBeat)){
idx <- PredResults$BEAT==NumGrdinBeat$BEAT[i]
PredResults$INC_CNT[idx] <- PredResults$INC_CNT[idx]/NumGrdinBeat$NumGrd[i]
PredResults$TSpred[idx] <- PredResults$TSpred[idx]/NumGrdinBeat$NumGrd[i]
PredResults$TSerr[idx] <- PredResults$TSerr[idx]/NumGrdinBeat$NumGrd[i]
}
prob <- 0.9
filepath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/BurglaryAnalysis/Plots/BeatPredFig/"
par(mfrow=c(1,1))
ptm <- proc.time()
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
PredResults.sub <- subset(PredResults,DATEOCC==d)
PredResults.subRaster <- rasterize(PredResults.sub[,c("X_COORD","Y_COORD")], r,
PredResults.sub$TSpred, fun=sum)
BurglaryActualPts.sub <- subset(BurglaryActualPts,DATEOCC==d,select=c("X_COORD","Y_COORD","INC_CNT"))
coordinates(BurglaryActualPts.sub) <- c("X_COORD", "Y_COORD") # promote to SpatialPointsDataFrame
proj4string(BurglaryActualPts.sub) <- proj4string(beat_template.spdf)
Hit.pred <- HitRate(PredResults.sub$TSpred,PredResults.subRaster,prob,BurglaryActualPts.sub)
jpeg(paste0(filepath,d,".jpg"), width=1118, height=713, units="px")
plot(PredResults.subRaster,col=jet.colors(256), main="Beat-wise time series prediction",
panel.first=grid(grd.beat_s@grid@cells.dim[2], grd.beat_s@grid@cells.dim[1],col="lightgray", lty="dotted"))
plot(Hit.pred$inPoly_poly, border="red", lwd=1.2, add=TRUE)
plot(BurglaryActualPts.sub, pch=16,col="red",cex=0.7,add=TRUE)
dev.off()
}
proc.time()-ptm
ptm <- proc.time()
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
PredResults.sub <- subset(PredResults,DATEOCC==d)
PredResults.subRaster <- rasterize(PredResults.sub[,c("X_COORD","Y_COORD")], r,
PredResults.sub$TSpred, fun=sum)
BurglaryActualPts.sub <- subset(BurglaryActualPts,DATEOCC==d,select=c("X_COORD","Y_COORD","INC_CNT"))
coordinates(BurglaryActualPts.sub) <- c("X_COORD", "Y_COORD") # promote to SpatialPointsDataFrame
proj4string(BurglaryActualPts.sub) <- proj4string(beat_template.spdf)
for (p in 1:length(probset)){
Hit.pred <- HitRate(PredResults.sub$TSpred,PredResults.subRaster,probset[p],BurglaryActualPts.sub)
TPR.pred[i,p] <- Hit.pred$HitRate
}
}
proc.time()-ptm
avgTPR.pred <- colMeans(TPR.pred)
avgTPR.long <- colMeans(TPR.long)
avgTPR.short <- colMeans(TPR.short)
# par(mfrow=c(1,1),pty="s")
# plot(probset,avgTPR.pred,type='b',col='red',cex=1,pch=16,lty="solid",
#      xlab="Pixel quantile of hot spots",ylab="Hit rate",main="Average sensitivity over all test examples",cex.main=0.75)
# lines(probset,avgTPR.long,type='b',col='green',cex=1,pch=15,lty="dotted")
# lines(probset,avgTPR.short,type='b',col='blue',cex=1,pch=17,lty="dashed")
# legend("bottom",legend=c("prediction model","long-term density","short-term density"),
#        col=c("red","green","blue"),pch=c(16,15,17),lty=c("solid","dotted","dashed"),inset = c(0,0),xpd=TRUE)
par(mfrow=c(1,1),pty="s")
plot(100*(1-probset),100*avgTPR.pred,type='b',col='red',cex=1,pch=16,lty="solid",cex.main=0.75,
xlab="Percentage of the highest pixel values (%)",ylab="Hit rate (%)",main="Average sensitivity over all test examples")
lines(100*(1-probset),100*avgTPR.long,type='b',col='green',cex=1,pch=15,lty="dotted")
lines(100*(1-probset),100*avgTPR.short,type='b',col='blue',cex=1,pch=17,lty="dashed")
legend("bottom",legend=c("prediction model","long-term density","short-term density"),
col=c("red","green","blue"),pch=c(16,15,17),lty=c("solid","dotted","dashed"),inset = c(0,0),xpd=TRUE)
PredResults <- data.frame(matrix(ncol=7, nrow=nrow(grd.beat_s@coords)*length(dateSeq.eval)))
colnames(PredResults) <- c("X_COORD","Y_COORD","DATEOCC","BEAT","INC_CNT","TSpred","TSerr")
PredResults$DATEOCC <- rep(dateSeq.eval,each=nrow(grd.beat_s@coords))
PredResults$X_COORD <- rep(grd.beat_s@coords[,1],length(dateSeq.eval))
PredResults$Y_COORD <- rep(grd.beat_s@coords[,2],length(dateSeq.eval))
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
Pred.df <- as.data.frame(BurglaryData.eval_stfdf[,d])
Pred.df$DATEOCC <- rep(d,nrow(Pred.df))
beatPred.spdf <- beat_template.pred_spdf
for (j in beatList){
Pred.beat_sub <- subset(Pred.df,BEAT==j)
beatPred.spdf@data$INC_CNT[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$INC_CNT
beatPred.spdf@data$TSpred[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$TSpred
beatPred.spdf@data$TSerr[beatPred.spdf@data$BEAT_NUMBE==j] <- Pred.beat_sub$TSerr
}
polysample <- over(grd.beat_s,beatPred.spdf)
polysample <- subset(cbind(polysample, grd.beat_s@coords),select=-c(OBJECTID,DISTRICT))
names(polysample)[names(polysample)=="BEAT_NUMBE"] <- "BEAT"
PredResults.sub <- subset(PredResults, DATEOCC==d,select=c("X_COORD","Y_COORD","DATEOCC"))
PredResults.sub <- merge(PredResults.sub,polysample,by=c("X_COORD","Y_COORD"),all=TRUE)
PredResults[PredResults$DATEOCC==d,] <- PredResults.sub
}
PredResults$BEAT <- factor(PredResults$BEAT)
levels(PredResults$BEAT) <- levels(BurglaryData.eval$BEAT)
prob <- 0.9
filepath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/BurglaryAnalysis/Plots/BeatPredFig/"
par(mfrow=c(1,1))
ptm <- proc.time()
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
PredResults.sub <- subset(PredResults,DATEOCC==d)
PredResults.subRaster <- rasterize(PredResults.sub[,c("X_COORD","Y_COORD")], r,
PredResults.sub$TSpred, fun=sum)
BurglaryActualPts.sub <- subset(BurglaryActualPts,DATEOCC==d,select=c("X_COORD","Y_COORD","INC_CNT"))
coordinates(BurglaryActualPts.sub) <- c("X_COORD", "Y_COORD") # promote to SpatialPointsDataFrame
proj4string(BurglaryActualPts.sub) <- proj4string(beat_template.spdf)
Hit.pred <- HitRate(PredResults.sub$TSpred,PredResults.subRaster,prob,BurglaryActualPts.sub)
jpeg(paste0(filepath,d,".jpg"), width=1118, height=713, units="px")
plot(PredResults.subRaster,col=jet.colors(256), main="Beat-wise time series prediction",
panel.first=grid(grd.beat_s@grid@cells.dim[2], grd.beat_s@grid@cells.dim[1],col="lightgray", lty="dotted"))
plot(Hit.pred$inPoly_poly, border="red", lwd=1.2, add=TRUE)
plot(BurglaryActualPts.sub, pch=16,col="red",cex=0.7,add=TRUE)
dev.off()
}
proc.time()-ptm
ptm <- proc.time()
for (i in 1:length(dateSeq.eval)){
d <- dateSeq.eval[i]
PredResults.sub <- subset(PredResults,DATEOCC==d)
PredResults.subRaster <- rasterize(PredResults.sub[,c("X_COORD","Y_COORD")], r,
PredResults.sub$TSpred, fun=sum)
BurglaryActualPts.sub <- subset(BurglaryActualPts,DATEOCC==d,select=c("X_COORD","Y_COORD","INC_CNT"))
coordinates(BurglaryActualPts.sub) <- c("X_COORD", "Y_COORD") # promote to SpatialPointsDataFrame
proj4string(BurglaryActualPts.sub) <- proj4string(beat_template.spdf)
for (p in 1:length(probset)){
Hit.pred <- HitRate(PredResults.sub$TSpred,PredResults.subRaster,probset[p],BurglaryActualPts.sub)
TPR.pred[i,p] <- Hit.pred$HitRate
}
}
proc.time()-ptm
avgTPR.pred <- colMeans(TPR.pred)
avgTPR.long <- colMeans(TPR.long)
avgTPR.short <- colMeans(TPR.short)
# par(mfrow=c(1,1),pty="s")
# plot(probset,avgTPR.pred,type='b',col='red',cex=1,pch=16,lty="solid",
#      xlab="Pixel quantile of hot spots",ylab="Hit rate",main="Average sensitivity over all test examples",cex.main=0.75)
# lines(probset,avgTPR.long,type='b',col='green',cex=1,pch=15,lty="dotted")
# lines(probset,avgTPR.short,type='b',col='blue',cex=1,pch=17,lty="dashed")
# legend("bottom",legend=c("prediction model","long-term density","short-term density"),
#        col=c("red","green","blue"),pch=c(16,15,17),lty=c("solid","dotted","dashed"),inset = c(0,0),xpd=TRUE)
par(mfrow=c(1,1),pty="s")
plot(100*(1-probset),100*avgTPR.pred,type='b',col='red',cex=1,pch=16,lty="solid",cex.main=0.75,
xlab="Percentage of the highest pixel values (%)",ylab="Hit rate (%)",main="Average sensitivity over all test examples")
lines(100*(1-probset),100*avgTPR.long,type='b',col='green',cex=1,pch=15,lty="dotted")
lines(100*(1-probset),100*avgTPR.short,type='b',col='blue',cex=1,pch=17,lty="dashed")
legend("bottom",legend=c("prediction model","long-term density","short-term density"),
col=c("red","green","blue"),pch=c(16,15,17),lty=c("solid","dotted","dashed"),inset = c(0,0),xpd=TRUE)
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/SpatialFeatureMaps.RData")
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/SegmentHotRegions.RData")
for (i in 1:length(classifier)){
if (i==1){
plot(rocCurve[[i]],col=cl[i],lty=1,lwd=2,downsampling=0.01)
}else{
plot(rocCurve[[i]],col=cl[i],lty=1,lwd=2,downsampling=0.01,add=TRUE)
}
}
mtext("ROC",side=3,cex=1,outer=TRUE)
par(new=TRUE)
plot(0, 0, type="n", bty="n", xaxt="n", yaxt="n",xlab="",ylab="")
legend("bottomright",legend=classifier,col=cl,lty=1,lwd=2,cex=0.8,inset=c(0,0),xpd=TRUE)
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
par(mfrow=c(1,1),mar=c(5,5,5,5),xaxs="i",yaxs="i",cex.axis=1,cex.lab=1,pty="s")
for (i in 1:length(classifier)){
if (i==1){
plot(rocCurve[[i]],col=cl[i],lty=1,lwd=2,downsampling=0.01)
}else{
plot(rocCurve[[i]],col=cl[i],lty=1,lwd=2,downsampling=0.01,add=TRUE)
}
}
mtext("ROC",side=3,cex=1,outer=TRUE)
par(new=TRUE)
plot(0, 0, type="n", bty="n", xaxt="n", yaxt="n",xlab="",ylab="")
legend("bottomright",legend=classifier,col=cl,lty=1,lwd=2,cex=0.8,inset=c(0,0),xpd=TRUE)
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/SegmentHotRegions.RData")
library(ROCR)
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/GroupData_ModelComparison3.RData")
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/GroupData_ModelComparison3.RData")
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
load("~/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/MC/SegmentHotRegions.RData")
library(randomForest)
?randomForest
print("AUC")
for(i in 1:length(classifier)){
print(paste0(classifier[i],":",round(aucVal[i],3)))
}
P <- matrix(runif(1e4*1e4),ncol=1e4)
P <- matrix(runif(2e4*2e4),ncol=2e4)
library(lgcp)
?win
?stppp
library(DBI)
library(rJava)
library(RJDBC)
drv <- JDBC("oracle.jdbc.OracleDriver", classPath="/Users/xiaomuliu/CrimeProject/CPDserverinstantclient_11_2/ojdbc5.jar", " ")
?JDBC
drv <- JDBC("oracle.jdbc.OracleDriver", classPath="/Users/xiaomuliu/CrimeProject/CPDserver/instantclient_11_2/ojdbc5.jar", " ")
drv <- JDBC("oracle.jdbc.OracleDriver", classPath="/Users/xiaomuliu/CrimeProject/CPDserver/instantclient_12_1/ojdbc5.jar", " ")
drv <- JDBC("oracle.jdbc.OracleDriver", classPath="/Users/xiaomuliu/CrimeProject/CPDserver/instantclient_12_1/ojdbc6.jar", " ")
a <- 1:3
b <- 1:3
plot(a,b)
?acf
install.packages("gputools")
pwd
getpwd
getpwd()
getwd()
Sys.getenv()
library(gputools)
system("ncvv --version")
system("nvcc --version")
system("nvidia-smi")
system("nvcc")
?chooseGpu
chooseGpu(deviceId=1)
chooseGpu(deviceId=0)
x <- matrix(rnorm(10000),100,100)
y <- matrix(rnorm(10000),100,100)
gpu1 <- system.time(gpuMatMult(x,y))
gpu1
cpu1 <- system.time(x%*%y)
cpu1
n <- 4000
x <- matrix(rnorm(n^2),n,n)
y <- matrix(rnorm(n^2),n,n)
gpu1 <- system.time(gpuMatMult(x,y))
n <- 1000
x <- matrix(rnorm(n^2),n,n)
y <- matrix(rnorm(n^2),n,n)
gpu1 <- system.time(gpuMatMult(x,y))
gpu1
cpu1 <- system.time(x%*%y)
cpu1
gpu2 <- system.time(b <- gpuSolve(x,y[,1]))
gpu2
cpu2 <- system.time(b <- solve(x,y[,1]))
?sovle
?solve
cpu2
cpu2 <- system.time(b <- solve(x%*%y))
gpu2 <- system.time(b <- gpuSolve(gpuMatMult(x,y)))
cpu1 <- system.time(x%*%y)
gpu1 <- system.time(gpuMatMult(x,y))
cpu1
gpu1
install.packages("drat")
drat:::addRepo("dmlc")
install.packages("mxnet")
library(caret)
install.packages("manipulate")
install.packages(c("car", "cluster", "curl", "DBI", "dbscan", "evaluate", "fields", "formatR", "geoR", "glmnet", "gplots", "gstat", "highr", "Hmisc", "htmltools", "jsonlite", "knitr", "ks", "lme4", "lubridate", "manipulate", "Matrix", "mclust", "nlme", "openssl", "plotKML", "polyclip", "RandomFields", "RandomFieldsUtils", "Rcpp", "rgdal", "rgeos", "rgl", "rmarkdown", "sp", "spdep", "survival", "swirl", "testthat", "XML", "zoo"), lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(caret)
install.packages("pbkrtest")
library(nnet)
?nnet
setwd("/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Classification/")
PredTarget <- "Burglary"
if (PredTarget=="Burglary"){
load("Burglary_DataPortal.RData")
CrimeData <- BurglaryData
rm(BurglaryData)
}else if (PredTarget=="ViolentCrime"){
load("ViolentCrime_DataPortal.RData")
CrimeData <- ViolentCrimeData
rm(ViolentCrimeData)
}
source("GroupData.R")
groupSize <- 7
CrimeData <- GroupData(CrimeData,groupSize)
library(sp)
library(rgeos)
library(rgdal)
library(raster)
Path.GIS <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/GISData/"
Path.city <- paste0(Path.GIS,"City_Boundary")
city.shp <- readOGR(Path.city,"City_Boundary")
cellsize.x <- 660
cellsize.y <- 660
X_range <- city.shp@bbox[1,]
Y_range <- city.shp@bbox[2,]
grd.full <- expand.grid(list(X_COORD=seq(X_range[1],X_range[2],by=cellsize.x),
Y_COORD=seq(Y_range[1],Y_range[2],by=cellsize.y)))
coordinates(grd.full) = ~X_COORD+Y_COORD # convert to SpatialPoints
prj <- paste("+proj=tmerc +lat_0=36.66666666666666 +lon_0=-88.33333333333333 +k=0.9999749999999999",
"+x_0=300000 +y_0=0 +datum=NAD83 +units=us-ft +no_defs +ellps=GRS80 +towgs84=0,0,0")
proj4string(grd.full) <- prj
# rasterize the city spatial polygon to get a grid template
grd.full <- SpatialPixels(grd.full)
r <- raster(ncol=grd.full@grid@cells.dim[1],nrow=grd.full@grid@cells.dim[2],
xmn=grd.full@bbox[1,1],xmx=grd.full@bbox[1,2],ymn=grd.full@bbox[2,1],ymx=grd.full@bbox[2,2],crs=CRS(prj))
city.raster <- rasterize(city.shp,r,0)
city.df_full <- as.data.frame(city.raster,xy=TRUE)
city.df_full <- city.df_full[,1:2]
names(city.df_full) <- c("X_COORD","Y_COORD")
RegGrd.full <- city.df_full
coordinates(city.df_full) <- c("X_COORD", "Y_COORD")
proj4string(city.df_full) <- prj
BoundedOverFullGrd <- over(city.df_full, city.shp)
isInCity <- !is.na(BoundedOverFullGrd$OBJECTID)
RegGrd <- RegGrd.full[isInCity,]
load("SpatialFeatureMap_Res660ft.RData")
startMonth<- 5
endMonth <- 10
startYear.train <- 2011
endYear.train <- 2011
startYear.test <- 2012
endYear.test <- 2012
TrainGroup <- subset(CrimeData,YEAR>=startYear.train&YEAR<=endYear.train&MONTH>=startMonth&MONTH<=endMonth,
select=c("GROUP"))
TestGroup <- subset(CrimeData,YEAR>=startYear.test&YEAR<=endYear.test&MONTH>=startMonth&MONTH<=endMonth,
select=c("GROUP"))
groupSeq.train <- unique(TrainGroup$GROUP)
startGroup.train <- groupSeq.train[1]
endGroup.train <- groupSeq.train[length(groupSeq.train)]
groupSeq.test <- unique(TestGroup$GROUP)
startGroup.test <- groupSeq.test[1]
endGroup.test <- groupSeq.test[length(groupSeq.test)]
# Set up kernels
sigma <- 2  # unit: pixel size
lambda <- 1/floor(2*7/groupSize)  # unit: time interval
window.x <- 3
window.y <- 3
window.t <- 8
kernel.Xgrd <- seq(-window.x,window.x,length.out=2*window.x+1)
kernel.Ygrd <- seq(-window.y,window.y,length.out=2*window.y+1)
kernel.Tgrd <- seq(0,window.t-1,length.out=window.t)
kernel.x <- 1/(sqrt(2*pi)*sigma)*exp(-kernel.Xgrd^2/(2*sigma^2))
kernel.y <- 1/(sqrt(2*pi)*sigma)*exp(-kernel.Ygrd^2/(2*sigma^2))
kernel.t <- exp(-lambda*kernel.Tgrd)
# Add *window.t* groups as the buffer so that the kernel smoothed feature would be able to comupted
CrimeData.train <- subset(CrimeData,GROUP>=startGroup.train-window.t & GROUP<=endGroup.train,
select=c("X_COORD","Y_COORD","INC_CNT","GROUP"))
CrimeData.test <- subset(CrimeData,GROUP>=startGroup.test-window.t & GROUP<=endGroup.test,
select=c("X_COORD","Y_COORD","INC_CNT","GROUP"))
# load other crime type data
if (PredTarget=="Burglary"){
filePath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/ExploratoryAnalysis/DataPortal/"
CrimeTypes <- c("Larceny","MotorVehicleTheft")
for (i in CrimeTypes){
load(paste0(filePath,i,"Data_portal.RData"))
eval(parse(text=paste0(i,"Data<-GroupData(",i,"Data,groupSize)")))
eval(parse(text=paste0(i,"Data<-subset(",i,"Data,select=c(\"GROUP\",\"X_COORD\",\"Y_COORD\",\"INC_CNT\"))")))
eval(parse(text=paste0(i,"Data.train<-subset(",i,"Data,GROUP>=startGroup.train-window.t & GROUP<=endGroup.train)")))
eval(parse(text=paste0(i,"Data.test<-subset(",i,"Data,GROUP>=startGroup.test-window.t & GROUP<=endGroup.test)")))
}
CrimeDataNames.train <- sapply(CrimeTypes,paste0,"Data.train",USE.NAMES=FALSE)
CrimeDataNames.test <- sapply(CrimeTypes,paste0,"Data.test",USE.NAMES=FALSE)
CrimeDataNames.train <- c("CrimeData.train",CrimeDataNames.train)
CrimeDataNames.test <- c("CrimeData.test",CrimeDataNames.test)
rm(list=sapply(CrimeTypes,paste0,"Data",USE.NAMES=FALSE))
invisible(gc(verbose=FALSE))
}else if (PredTarget=="ViolentCrime"){
CrimeDataNames.train <- c("CrimeData.train")
CrimeDataNames.test <- c("CrimeData.test")
}
# load 311 calls data
filePath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/OtherData/"
CallTypes <- c("VacantBldg","LightsAllOut","LightsOneOut","AlleyLightsOut")
for (i in CallTypes){
load(paste0(filePath,i,"Data.RData"))
eval(parse(text=paste0(i,"Data<-MatchCallData(",i,"Data,CrimeData)")))
eval(parse(text=paste0(i,"Data<-subset(",i,"Data,select=c(\"GROUP\",\"X_COORD\",\"Y_COORD\",\"CNT\"))")))
eval(parse(text=paste0(i,"Data.train<-subset(",i,"Data,GROUP>=startGroup.train-window.t & GROUP<=endGroup.train)")))
eval(parse(text=paste0(i,"Data.test<-subset(",i,"Data,GROUP>=startGroup.test-window.t & GROUP<=endGroup.test)")))
}
CallDataNames.train <- sapply(CallTypes,paste0,"Data.train",USE.NAMES=FALSE)
CallDataNames.test <- sapply(CallTypes,paste0,"Data.test",USE.NAMES=FALSE)
rm(list=sapply(CallTypes,paste0,"Data",USE.NAMES=FALSE))
invisible(gc(verbose=FALSE))
VarName.space <- c("StrDen","Dist2Street","Dist2CPDstation","Dist2School","Dist2Park",
"Dist2BusStop","Dist2Lstation","BldgDen","GarageDen","AvgStories","AvgUnits",
"Dist2CHA","Dist2POD")
VarName.census <- c("PERCENT_OF_HOUSING_CROWDED","PERCENT_HOUSEHOLDS_BELOW_POVERTY","PERCENT_AGED_16_UNEMPLOYED",
"PERCENT_AGED_25_WITHOUT_HIGH_SCHOOL_DIPLOMA","PERCENT_AGED_UNDER_18_OR_OVER_64","PER_CAPITA_INCOME","HARDSHIP_INDEX")
VarName.call <- c("VacantBldg","LightsAllOut","LightsOneOut","AlleyLightsOut")
if (PredTarget=="Burglary"){
VarName.STcrime <- c("BurglaryShort","LarcenyShort","VehicleTheftShort")
VarName.LTcrime <- "BurglaryLong"
}else if (PredTarget=="ViolentCrime"){
VarName.STcrime <- "VCShort"
VarName.LTcrime <- "VCLong"
}
VarName <- c(VarName.space,VarName.census,VarName.call,VarName.STcrime,VarName.LTcrime)
source("SmoothingFunction.R")
source("PrepareFeatureLabel.R")
period.long <- 5*floor(365/groupSize)
set.seed(1234)
scaling <- "zscore"
AllRegion <- rep(TRUE,nrow(RegGrd))
LabFeatVec <- LabelFeatureVec(RegGrd,groupSeq.train,CrimeData.train,CrimeData,VarName.space,VarName.census,VarName.call,VarName.STcrime,
VarName.LTcrime,CrimeDataNames.train,CallDataNames.train,RegGrd.full,AllRegion,
window.t,kenerl.x,kernel.y,kernel.t,period.long,r,prj,isInCity)
FeatureVec.train <- LabFeatVec$FeatureVec
Label.train <- LabFeatVec$Label
LabFeatVec <- LabelFeatureVec(RegGrd,groupSeq.test,CrimeData.test,CrimeData,VarName.space,VarName.census,VarName.call,VarName.STcrime,
VarName.LTcrime,CrimeDataNames.test,CallDataNames.test,RegGrd.full,AllRegion,
window.t,kenerl.x,kernel.y,kernel.t,period.long,r,prj,isInCity)
FeatureVec.test <- LabFeatVec$FeatureVec
Label.test <- LabFeatVec$Label
# scale data
ScaledFeat <- Scaling(FeatureVec.train,FeatureVec.test,scaling=scaling)
FeatureVec.train_scale <- ScaledFeat$ScaledTrain
FeatureVec.test_scale <- ScaledFeat$ScaledTest
# gather data
AssembledData <- AssembleData(FeatureVec.train_scale,Label.train,FeatureVec.test_scale,Label.test,downsample=TRUE)
TrainData.sub <- AssembledData$TrainData.sub
TestData.sub <- AssembledData$TestData.sub
# garbage collection to release memory
rm(list=sapply(CallTypes,paste0,"Data.train",USE.NAMES=FALSE))
rm(list=sapply(CallTypes,paste0,"Data.test",USE.NAMES=FALSE))
rm(list=c("ScaledFeat","LabFeatVec","AssembledData","FeatureVec.train_scale","FeatureVec.test_scale",
"FeatureVec.train","FeatureVec.test"))
invisible(gc(verbose=FALSE))
?dbn.train
library(deepnet)
?dbn.dnn.train
?dbn.train
?sae.train
sae.train
X <- TrainData.sub[,-c("Label")]
X <- subset(TrainData.sub,select=-"Label")
X <- subset(TrainData.sub,select=-Label)
X <- as.matrix(subset(TrainData.sub,select=-Label))
y <- as.vector(TrainData.sub$Label)
ptm <- proc.time()
dbn.dnn.train(X, y, hidden = c(20,10), activationfun = "sigm", learningrate = 0.8,
momentum = 0.5, learningrate_scale = 0.8, output = "sigm", numepochs = 3,
batchsize = 100, hidden_dropout = 0, visible_dropout = 0, cd = 1)
proc.time()-ptm
class(y)
y <- as.vector(as.numeric(TrainData.sub$Label))
unique(y)
y <- as.numeric(as.vector(TrainData.sub$Label))
unique(y)
ptm <- proc.time()
DBN_DNN <- dbn.dnn.train(X, y, hidden = c(20,10), activationfun = "sigm", learningrate = 0.8,
momentum = 0.5, learningrate_scale = 0.8, output = "sigm", numepochs = 3,
batchsize = 100, hidden_dropout = 0, visible_dropout = 0, cd = 1)
proc.time()-ptm
X.test <- as.matrix(subset(TestData.sub,select=-Label))
y.test <- as.numeric(as.vector(TestData.sub$Label))
yhat.test <- nn.predict(DBN_DNN, X.test)
yhat.test[1:5]
summary(yhat.test)
hist(yhat.test)
X.train <- as.matrix(subset(TrainData.sub,select=-Label))
y.train <- as.numeric(as.vector(TrainData.sub$Label))
ptm <- proc.time()
DBN_DNN <- dbn.dnn.train(X.trian, y.train, hidden = c(100,50,20), activationfun = "sigm", learningrate = 0.8,
momentum = 0.5, learningrate_scale = 0.8, output = "sigm", numepochs = 3,
batchsize = 100, hidden_dropout = 0, visible_dropout = 0, cd = 1)
proc.time()-ptm
X.test <- as.matrix(subset(TestData.sub,select=-Label))
y.test <- as.numeric(as.vector(TestData.sub$Label))
yhat.test <- nn.predict(DBN_DNN, X.test)
X.train <- as.matrix(subset(TrainData.sub,select=-Label))
y.train <- as.numeric(as.vector(TrainData.sub$Label))
ptm <- proc.time()
DBN_DNN <- dbn.dnn.train(X.train, y.train, hidden = c(100,50,20), activationfun = "sigm", learningrate = 0.8,
momentum = 0.5, learningrate_scale = 0.8, output = "sigm", numepochs = 3,
batchsize = 100, hidden_dropout = 0, visible_dropout = 0, cd = 1)
proc.time()-ptm
X.test <- as.matrix(subset(TestData.sub,select=-Label))
y.test <- as.numeric(as.vector(TestData.sub$Label))
yhat.test <- nn.predict(DBN_DNN, X.test)
hist(yhat.test)
Pred.test_dbn <- nn.predict(DBN_DNN, X.test)
X.train <- as.matrix(subset(TrainData.sub,select=-Label))
y.train <- as.numeric(as.vector(TrainData.sub$Label))
ptm <- proc.time()
DBN_DNN <- dbn.dnn.train(X.train, y.train, hidden = c(500,100,50), activationfun = "sigm", learningrate = 0.8,
momentum = 0.5, learningrate_scale = 0.8, output = "sigm", numepochs = 3,
batchsize = 100, hidden_dropout = 0, visible_dropout = 0, cd = 1)
proc.time()-ptm
X.test <- as.matrix(subset(TestData.sub,select=-Label))
y.test <- as.numeric(as.vector(TestData.sub$Label))
Pred.test_dbn <- nn.predict(DBN_DNN, X.test)
hist(yhat.test)
hist(Pred.test_dbn)
lambda
rm(list=ls())
gc()
setwd("/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Classification/")
PredTarget <- "Burglary"
source("SetupGrid.R")
load("SpatialFeatureMap_Res660ft.RData")
source("SetupCrimeData.R")
source("SetupKernels.R")
source("PullTrainTestRawData.R")
?is.integer
a <- 3
is.integer(a)
is.numeric(a)
a <- NA
is.numeric(a)
library(glmnet)
?cv.glmnet
library(randomForest)
install.packages("randomForest")
library(randomForest)
?randomForest
library(e1701)
library(e1071)
?svm

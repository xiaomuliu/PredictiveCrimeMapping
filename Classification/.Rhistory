TPR.sd <- apply(TPRary,c(1,3),sd)
par(mfrow=c(1,1),mar=c(4.5,3,3,3),xaxs="i",yaxs="i",cex.axis=1,cex.lab=1,pty="s")
plot(0, type="n", xlab="Percentage of the highest pixel values (%)", ylab="Hit rate (%)",
xlim=100*c(0,percentArea[length(percentArea)]),ylim=100*c(0,1.1*max(TPRary)),cex.lab=1.2)
for (i in 1:length(models)){
x <- 100*percentArea
y <- 100*TPR.mean[i,]
bar <- 100*TPR.sd[i,]
lines(x,y,col=cl[i],pch=ptChar[i],type='b',lty=1,cex=0.8)
arrows(x, y+bar, x, y-bar, angle=90, code=3, length=0.05,col=cl[i]) # one-standard-deviation error bar
}
# mtext("ROC",side=3,cex=1,outer=TRUE)
par(new=TRUE)
plot(0, 0, type="n", bty="n", xaxt="n", yaxt="n",xlab="",ylab="")
legend("bottomright",legend=models,col=cl,pch=ptChar,lty=1,lwd=2,cex=0.8,inset=c(0,0),xpd=TRUE)
plot(0, type="n", xlab="Test Group", ylab="AUC",xlim=c(1,length(groupSeq.test)),ylim=range(AUCary))
for (i in 1:length(models)){
lines(1:length(groupSeq.test),AUCary[i,],col=cl[i],pch=ptChar[i],type='b')
}
# mtext("partial AUC",side=3,cex=1,outer=TRUE)
par(new=TRUE)
plot(0, 0, type="n", bty="n", xaxt="n", yaxt="n",xlab="",ylab="")
legend("bottomright",legend=models,col=cl,pch=ptChar,lty=1,lwd=2,cex=0.8,inset=c(0,0),xpd=TRUE)
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
exampleIdx <- 1 # which example to show
Pred.test.sub <- Pred.test[((exampleIdx-1)*nrow(RegGrd)+1):(exampleIdx*nrow(RegGrd))]
Pred.df_inCity <- data.frame(X_COORD=RegGrd$X_COORD,Y_COORD=RegGrd$Y_COORD,ProbPred=Pred.test.sub)
Pred.raster_inCity <- rasterize(Pred.df_inCity[,c("X_COORD","Y_COORD")], r, Pred.df_inCity$ProbPred, fun=mean)
CrimeData.group <- subset(CrimeData, GROUP==groupSeq.test[exampleIdx], select=c("X_COORD","Y_COORD","INC_CNT"))
CrimeData.sp <- SpatialPoints(coords=CrimeData.group[,c("X_COORD","Y_COORD")])
EmptyRaster <- rasterize(RegGrd[,c("X_COORD","Y_COORD")], r, 0)
par(mfrow=c(1,2),mar=c(4,2,1,2),xaxs="i",yaxs="i",cex.axis=0.8,cex.lab=0.8,pty="s")
plot(Pred.raster_inCity,col=jet.colors(256),xlab="X coordinate",ylab="Y coordinate")
plot(EmptyRaster,xlab="X coordinate",ylab="Y coordinate",col="white",legend=FALSE)
plot(city.shp, border="black",add=TRUE)
points(CrimeData.sp, pch=16, cex=.5,col="red")
exampleIdx <- 10 # which example to show
Pred.test.sub <- Pred.test[((exampleIdx-1)*nrow(RegGrd)+1):(exampleIdx*nrow(RegGrd))]
Pred.df_inCity <- data.frame(X_COORD=RegGrd$X_COORD,Y_COORD=RegGrd$Y_COORD,ProbPred=Pred.test.sub)
Pred.raster_inCity <- rasterize(Pred.df_inCity[,c("X_COORD","Y_COORD")], r, Pred.df_inCity$ProbPred, fun=mean)
CrimeData.group <- subset(CrimeData, GROUP==groupSeq.test[exampleIdx], select=c("X_COORD","Y_COORD","INC_CNT"))
CrimeData.sp <- SpatialPoints(coords=CrimeData.group[,c("X_COORD","Y_COORD")])
EmptyRaster <- rasterize(RegGrd[,c("X_COORD","Y_COORD")], r, 0)
par(mfrow=c(1,2),mar=c(4,2,1,2),xaxs="i",yaxs="i",cex.axis=0.8,cex.lab=0.8,pty="s")
plot(Pred.raster_inCity,col=jet.colors(256),xlab="X coordinate",ylab="Y coordinate")
plot(EmptyRaster,xlab="X coordinate",ylab="Y coordinate",col="white",legend=FALSE)
plot(city.shp, border="black",add=TRUE)
points(CrimeData.sp, pch=16, cex=.5,col="red")
CVinfo <- classObj$CVinfo
CVinfo <- classObj$CV
?tune.nnet
source("Classification.R")
classifiers <- c("mNN")
# formula.part1 <- paste0("Label~",paste(VarName.call,sep="",collapse="+"))
# formula.part2 <- paste("s(",c(VarName.space,VarName.STcrime,VarName.census,VarName.LTcrime),")",sep="",collapse="+")
# gamFormula <- as.formula(paste0(formula.part1,"+",formula.part2))
# DBN="hiddenArch=c(100),learningrate=0.8,momentum=0.3,learningrate_scale=0.5,output='sigm',numepochs=3,
#                      batchsize=round(0.005*nrow(TrainData.sub)),hidden_dropout=0,visible_dropout=0,cd=1"
funArgs <- list(NB="kfold=0,PCA=FALSE,keepPC=NULL",
LDA="kfold=0,PCA=FALSE,keepPC=NULL",
LogReg="kfold=0,PCA=FALSE,keepPC=NULL",
Lasso="kfold=10,lambda=NULL,NumLambda=15",
RF="kfold=0,NumVar=NULL,NumTree=NULL",
Adaboost="kfold=0,NumIter=NULL",
SVM="kfold=0,SVMkernel=NULL,Cseq=NULL,dSeq=NULL,gammaSeq=NULL",
GAM="gamFormula=gamFormula",
sNN="kfold=5,NumUnit=seq(2,30,by=2),WgtDecaySeq=10^seq(-2,1,by=0.5)",
mNN="kfold=5,hiddenArch=list(c(10,5),c(20,10))",
DBN="hiddenArch=c(100,50)")
AUCary.cls <- matrix(0,nrow=length(classifiers),ncol=length(groupSeq.test))
TPRary.cls <- array(0,dim=c(length(classifiers),length(groupSeq.test),length(percentArea)))
for (m in 1:length(classifiers)){
eval(parse(text=paste0("classObj <- Classification(TrainData.sub,TestData.sub,classifiers[m],",funArgs[[classifiers[m]]],")")))
Pred.test <- classObj$PredTest
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred.test,r=r,isInCity=isInCity)
AUCary.cls[m, ] <- rocObj$AUC
TPRary.cls[m, , ] <- rocObj$TPR
}
install.packages("nerualnet")
install.packages("neuralnet")
classifiers <- c("mNN")
# formula.part1 <- paste0("Label~",paste(VarName.call,sep="",collapse="+"))
# formula.part2 <- paste("s(",c(VarName.space,VarName.STcrime,VarName.census,VarName.LTcrime),")",sep="",collapse="+")
# gamFormula <- as.formula(paste0(formula.part1,"+",formula.part2))
# DBN="hiddenArch=c(100),learningrate=0.8,momentum=0.3,learningrate_scale=0.5,output='sigm',numepochs=3,
#                      batchsize=round(0.005*nrow(TrainData.sub)),hidden_dropout=0,visible_dropout=0,cd=1"
funArgs <- list(NB="kfold=0,PCA=FALSE,keepPC=NULL",
LDA="kfold=0,PCA=FALSE,keepPC=NULL",
LogReg="kfold=0,PCA=FALSE,keepPC=NULL",
Lasso="kfold=10,lambda=NULL,NumLambda=15",
RF="kfold=0,NumVar=NULL,NumTree=NULL",
Adaboost="kfold=0,NumIter=NULL",
SVM="kfold=0,SVMkernel=NULL,Cseq=NULL,dSeq=NULL,gammaSeq=NULL",
GAM="gamFormula=gamFormula",
sNN="kfold=5,NumUnit=seq(2,30,by=2),WgtDecaySeq=10^seq(-2,1,by=0.5)",
mNN="kfold=5,hiddenArch=list(c(10,5),c(20,10))",
DBN="hiddenArch=c(100,50)")
AUCary.cls <- matrix(0,nrow=length(classifiers),ncol=length(groupSeq.test))
TPRary.cls <- array(0,dim=c(length(classifiers),length(groupSeq.test),length(percentArea)))
for (m in 1:length(classifiers)){
eval(parse(text=paste0("classObj <- Classification(TrainData.sub,TestData.sub,classifiers[m],",funArgs[[classifiers[m]]],")")))
Pred.test <- classObj$PredTest
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred.test,r=r,isInCity=isInCity)
AUCary.cls[m, ] <- rocObj$AUC
TPRary.cls[m, , ] <- rocObj$TPR
}
paste(colnames(subset(TrainData.sub,select=-Label)), collapse = " + "
)
formula.nn <- as.formula(paste("Label ~", paste(colnames(subset(TrainData.sub,select=-Label)), collapse = " + ")))
formula.nn
source("Classification.R")
classifiers <- c("mNN")
# formula.part1 <- paste0("Label~",paste(VarName.call,sep="",collapse="+"))
# formula.part2 <- paste("s(",c(VarName.space,VarName.STcrime,VarName.census,VarName.LTcrime),")",sep="",collapse="+")
# gamFormula <- as.formula(paste0(formula.part1,"+",formula.part2))
# DBN="hiddenArch=c(100),learningrate=0.8,momentum=0.3,learningrate_scale=0.5,output='sigm',numepochs=3,
#                      batchsize=round(0.005*nrow(TrainData.sub)),hidden_dropout=0,visible_dropout=0,cd=1"
funArgs <- list(NB="kfold=0,PCA=FALSE,keepPC=NULL",
LDA="kfold=0,PCA=FALSE,keepPC=NULL",
LogReg="kfold=0,PCA=FALSE,keepPC=NULL",
Lasso="kfold=10,lambda=NULL,NumLambda=15",
RF="kfold=0,NumVar=NULL,NumTree=NULL",
Adaboost="kfold=0,NumIter=NULL",
SVM="kfold=0,SVMkernel=NULL,Cseq=NULL,dSeq=NULL,gammaSeq=NULL",
GAM="gamFormula=gamFormula",
sNN="kfold=5,NumUnit=seq(2,30,by=2),WgtDecaySeq=10^seq(-2,1,by=0.5)",
mNN="kfold=5,hiddenArch=list(c(10,5),c(20,10))",
DBN="hiddenArch=c(100,50)")
AUCary.cls <- matrix(0,nrow=length(classifiers),ncol=length(groupSeq.test))
TPRary.cls <- array(0,dim=c(length(classifiers),length(groupSeq.test),length(percentArea)))
for (m in 1:length(classifiers)){
eval(parse(text=paste0("classObj <- Classification(TrainData.sub,TestData.sub,classifiers[m],",funArgs[[classifiers[m]]],")")))
Pred.test <- classObj$PredTest
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred.test,r=r,isInCity=isInCity)
AUCary.cls[m, ] <- rocObj$AUC
TPRary.cls[m, , ] <- rocObj$TPR
}
library(abind)
AUCary <- rbind(AUCary.cls,AUCary.hs)
TPRary <- abind(TPRary.cls,TPRary.hs,along=1)
models <- c(classifiers,hotspots)
cl <- rainbow(length(models))
ptChar <- 13:(13+length(models)-1)
TPR.mean <- apply(TPRary,c(1,3),mean)
TPR.sd <- apply(TPRary,c(1,3),sd)
par(mfrow=c(1,1),mar=c(4.5,3,3,3),xaxs="i",yaxs="i",cex.axis=1,cex.lab=1,pty="s")
plot(0, type="n", xlab="Percentage of the highest pixel values (%)", ylab="Hit rate (%)",
xlim=100*c(0,percentArea[length(percentArea)]),ylim=100*c(0,1.1*max(TPRary)),cex.lab=1.2)
for (i in 1:length(models)){
x <- 100*percentArea
y <- 100*TPR.mean[i,]
bar <- 100*TPR.sd[i,]
lines(x,y,col=cl[i],pch=ptChar[i],type='b',lty=1,cex=0.8)
arrows(x, y+bar, x, y-bar, angle=90, code=3, length=0.05,col=cl[i]) # one-standard-deviation error bar
}
# mtext("ROC",side=3,cex=1,outer=TRUE)
par(new=TRUE)
plot(0, 0, type="n", bty="n", xaxt="n", yaxt="n",xlab="",ylab="")
legend("bottomright",legend=models,col=cl,pch=ptChar,lty=1,lwd=2,cex=0.8,inset=c(0,0),xpd=TRUE)
plot(0, type="n", xlab="Test Group", ylab="AUC",xlim=c(1,length(groupSeq.test)),ylim=range(AUCary))
for (i in 1:length(models)){
lines(1:length(groupSeq.test),AUCary[i,],col=cl[i],pch=ptChar[i],type='b')
}
# mtext("partial AUC",side=3,cex=1,outer=TRUE)
par(new=TRUE)
plot(0, 0, type="n", bty="n", xaxt="n", yaxt="n",xlab="",ylab="")
legend("bottomright",legend=models,col=cl,pch=ptChar,lty=1,lwd=2,cex=0.8,inset=c(0,0),xpd=TRUE)
# Visualize a test example
jet.colors <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000"))
exampleIdx <- 10 # which example to show
Pred.test.sub <- Pred.test[((exampleIdx-1)*nrow(RegGrd)+1):(exampleIdx*nrow(RegGrd))]
Pred.df_inCity <- data.frame(X_COORD=RegGrd$X_COORD,Y_COORD=RegGrd$Y_COORD,ProbPred=Pred.test.sub)
Pred.raster_inCity <- rasterize(Pred.df_inCity[,c("X_COORD","Y_COORD")], r, Pred.df_inCity$ProbPred, fun=mean)
CrimeData.group <- subset(CrimeData, GROUP==groupSeq.test[exampleIdx], select=c("X_COORD","Y_COORD","INC_CNT"))
CrimeData.sp <- SpatialPoints(coords=CrimeData.group[,c("X_COORD","Y_COORD")])
EmptyRaster <- rasterize(RegGrd[,c("X_COORD","Y_COORD")], r, 0)
par(mfrow=c(1,2),mar=c(4,2,1,2),xaxs="i",yaxs="i",cex.axis=0.8,cex.lab=0.8,pty="s")
plot(Pred.raster_inCity,col=jet.colors(256),xlab="X coordinate",ylab="Y coordinate")
plot(EmptyRaster,xlab="X coordinate",ylab="Y coordinate",col="white",legend=FALSE)
plot(city.shp, border="black",add=TRUE)
points(CrimeData.sp, pch=16, cex=.5,col="red")
hiddenArch
a <- list(c(1,1),c(2,2))
a[1]
a[[1]]
a[[2]]
b <- c(1,2)
b
rm(list=ls())
setwd("/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Classification/")
PredTarget <- "Burglary"
source("SetupGrid.R")
load("SpatialFeatureMap_Res660ft.RData")
source("SetupCrimeData.R")
source("SetupKernels.R")
source("PullRawData.R")
source("StructureData.R")
source("Classification.R")
# Pedictive model training and testing
source("EvaluationFunction.R")
period.short <- floor(1/lambda)
period.long <- 5*floor(365/groupSize)
percentArea <- seq(0,1,length.out=21)
hotspots <- c("LT","ST")
periods <- c(period.long,period.short)
AUCary.hs <- matrix(0,nrow=length(hotspots),ncol=length(groupSeq.test))
TPRary.hs <- array(0,dim=c(length(hotspots),length(groupSeq.test),length(percentArea)))
for (m in 1:length(hotspots)){
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred=NULL,hotspot=TRUE,RegGrd.full,
window.t,kernel.x,kernel.y,periods[m],r,isInCity,prj)
AUCary.hs[m, ] <- rocObj$AUC
TPRary.hs[m, , ] <- rocObj$TPR
}
classifiers <- c("mNN")
# formula.part1 <- paste0("Label~",paste(VarName.call,sep="",collapse="+"))
# formula.part2 <- paste("s(",c(VarName.space,VarName.STcrime,VarName.census,VarName.LTcrime),")",sep="",collapse="+")
# gamFormula <- as.formula(paste0(formula.part1,"+",formula.part2))
# DBN="hiddenArch=c(100),learningrate=0.8,momentum=0.3,learningrate_scale=0.5,output='sigm',numepochs=3,
#                      batchsize=round(0.005*nrow(TrainData.sub)),hidden_dropout=0,visible_dropout=0,cd=1"
funArgs <- list(NB="kfold=0,PCA=FALSE,keepPC=NULL",
LDA="kfold=0,PCA=FALSE,keepPC=NULL",
LogReg="kfold=0,PCA=FALSE,keepPC=NULL",
Lasso="kfold=10,lambda=NULL,NumLambda=15",
RF="kfold=0,NumVar=NULL,NumTree=NULL",
Adaboost="kfold=0,NumIter=NULL",
SVM="kfold=0,SVMkernel=NULL,Cseq=NULL,dSeq=NULL,gammaSeq=NULL",
GAM="gamFormula=gamFormula",
sNN="kfold=5,NumUnit=seq(2,30,by=2),WgtDecaySeq=10^seq(-2,1,by=0.5)",
mNN="kfold=5,hiddenArch=list(c(10,5),c(20,10))",
DBN="hiddenArch=c(100,50)",
SAE="hiddenArch=c(100,50)")
AUCary.cls <- matrix(0,nrow=length(classifiers),ncol=length(groupSeq.test))
TPRary.cls <- array(0,dim=c(length(classifiers),length(groupSeq.test),length(percentArea)))
for (m in 1:length(classifiers)){
eval(parse(text=paste0("classObj <- Classification(TrainData.sub,TestData.sub,classifiers[m],",funArgs[[classifiers[m]]],")")))
Pred.test <- classObj$PredTest
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred.test,r=r,isInCity=isInCity)
AUCary.cls[m, ] <- rocObj$AUC
TPRary.cls[m, , ] <- rocObj$TPR
}
source("Classification.R")
for (m in 1:length(classifiers)){
eval(parse(text=paste0("classObj <- Classification(TrainData.sub,TestData.sub,classifiers[m],",funArgs[[classifiers[m]]],")")))
Pred.test <- classObj$PredTest
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred.test,r=r,isInCity=isInCity)
AUCary.cls[m, ] <- rocObj$AUC
TPRary.cls[m, , ] <- rocObj$TPR
}
warnings(0)
source("Classification.R")
for (m in 1:length(classifiers)){
eval(parse(text=paste0("classObj <- Classification(TrainData.sub,TestData.sub,classifiers[m],",funArgs[[classifiers[m]]],")")))
Pred.test <- classObj$PredTest
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred.test,r=r,isInCity=isInCity)
AUCary.cls[m, ] <- rocObj$AUC
TPRary.cls[m, , ] <- rocObj$TPR
}
warnings()
funArgs <- list(NB="kfold=0,PCA=FALSE,keepPC=NULL",
LDA="kfold=0,PCA=FALSE,keepPC=NULL",
LogReg="kfold=0,PCA=FALSE,keepPC=NULL",
Lasso="kfold=10,lambda=NULL,NumLambda=15",
RF="kfold=0,NumVar=NULL,NumTree=NULL",
Adaboost="kfold=0,NumIter=NULL",
SVM="kfold=0,SVMkernel=NULL,Cseq=NULL,dSeq=NULL,gammaSeq=NULL",
GAM="gamFormula=gamFormula",
sNN="kfold=5,NumUnit=seq(2,30,by=2),WgtDecaySeq=10^seq(-2,1,by=0.5)",
# mNN="kfold=5,hiddenArch=list(c(10,5),c(20,10))",
mNN="hiddenArch=c(10,5)"
DBN="hiddenArch=c(100,50)",
SAE="hiddenArch=c(100,50)")
AUCary.cls <- matrix(0,nrow=length(classifiers),ncol=length(groupSeq.test))
TPRary.cls <- array(0,dim=c(length(classifiers),length(groupSeq.test),length(percentArea)))
for (m in 1:length(classifiers)){
eval(parse(text=paste0("classObj <- Classification(TrainData.sub,TestData.sub,classifiers[m],",funArgs[[classifiers[m]]],")")))
Pred.test <- classObj$PredTest
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred.test,r=r,isInCity=isInCity)
AUCary.cls[m, ] <- rocObj$AUC
TPRary.cls[m, , ] <- rocObj$TPR
}
funArgs <- list(NB="kfold=0,PCA=FALSE,keepPC=NULL",
LDA="kfold=0,PCA=FALSE,keepPC=NULL",
LogReg="kfold=0,PCA=FALSE,keepPC=NULL",
Lasso="kfold=10,lambda=NULL,NumLambda=15",
RF="kfold=0,NumVar=NULL,NumTree=NULL",
Adaboost="kfold=0,NumIter=NULL",
SVM="kfold=0,SVMkernel=NULL,Cseq=NULL,dSeq=NULL,gammaSeq=NULL",
GAM="gamFormula=gamFormula",
sNN="kfold=5,NumUnit=seq(2,30,by=2),WgtDecaySeq=10^seq(-2,1,by=0.5)",
# mNN="kfold=5,hiddenArch=list(c(10,5),c(20,10))",
mNN="hiddenArch=c(10,5)",
DBN="hiddenArch=c(100,50)",
SAE="hiddenArch=c(100,50)")
AUCary.cls <- matrix(0,nrow=length(classifiers),ncol=length(groupSeq.test))
TPRary.cls <- array(0,dim=c(length(classifiers),length(groupSeq.test),length(percentArea)))
for (m in 1:length(classifiers)){
eval(parse(text=paste0("classObj <- Classification(TrainData.sub,TestData.sub,classifiers[m],",funArgs[[classifiers[m]]],")")))
Pred.test <- classObj$PredTest
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred.test,r=r,isInCity=isInCity)
AUCary.cls[m, ] <- rocObj$AUC
TPRary.cls[m, , ] <- rocObj$TPR
}
formula.nn <- as.formula(paste("Label ~", paste(colnames(subset(TrainData.sub,select=-Label)), collapse = " + ")))
formula.nn
summary(TrainData.sub)
head(TrainData.sub)
str(TrainData.sub)
as.numeric(TrainData.sub$Label[1:5])
summary(as.numeric(TrainData.sub$Label))
summary(as.numeric(as.character(TrainData.sub$Label)))
source("Classification.R")
funArgs <- list(NB="kfold=0,PCA=FALSE,keepPC=NULL",
LDA="kfold=0,PCA=FALSE,keepPC=NULL",
LogReg="kfold=0,PCA=FALSE,keepPC=NULL",
Lasso="kfold=10,lambda=NULL,NumLambda=15",
RF="kfold=0,NumVar=NULL,NumTree=NULL",
Adaboost="kfold=0,NumIter=NULL",
SVM="kfold=0,SVMkernel=NULL,Cseq=NULL,dSeq=NULL,gammaSeq=NULL",
GAM="gamFormula=gamFormula",
sNN="kfold=5,NumUnit=seq(2,30,by=2),WgtDecaySeq=10^seq(-2,1,by=0.5)",
# mNN="kfold=5,hiddenArch=list(c(10,5),c(20,10))",
mNN="hiddenArch=c(10,5)",
DBN="hiddenArch=c(100,50)",
SAE="hiddenArch=c(100,50)")
AUCary.cls <- matrix(0,nrow=length(classifiers),ncol=length(groupSeq.test))
TPRary.cls <- array(0,dim=c(length(classifiers),length(groupSeq.test),length(percentArea)))
for (m in 1:length(classifiers)){
eval(parse(text=paste0("classObj <- Classification(TrainData.sub,TestData.sub,classifiers[m],",funArgs[[classifiers[m]]],")")))
Pred.test <- classObj$PredTest
rocObj <- ROCeval(CrimeData,groupSeq.test,RegGrd,percentArea,Pred.test,r=r,isInCity=isInCity)
AUCary.cls[m, ] <- rocObj$AUC
TPRary.cls[m, , ] <- rocObj$TPR
}
mean(as.vector(dist(subset(TrainData.sub[sample(nrow(TrainData.sub),1000),],select=-c(Label)))))
source("Classification.R")
source("EvaluationFunction.R")
percentArea <- seq(0,1,length.out=21)
source("EvalHotspot.R")
source("TrainAndEvalClassifier.R")
?Sys.time
system.time(1*2)
system.time(1*2)
t <- system.time(1*2)
print(t)
source("TrainAndEvalClassifier.R")
featureMeanDist
1/featureMeanDist^2*10*seq(-2,2,by=1)
1/featureMeanDist^2*10^seq(-2,2,by=1)
1/featureMeanDist^2*10^seq(-2,2,by=0.5)
source("TrainAndEvalClassifier.R")
source("PlotEval.R")
source("TrainAndEvalClassifier.R")
source("PlotEval.R")
hotspots
exists(classifiers) & exists(hotspots)
exists(hotspots)
exists("hotspots")
source("PlotEval.R")
source("VisualizePred.R")
CVinfo <- classObj$CV
CVinfo$preformances
CVinfo$performances
rm(list=ls())
setwd("/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Classification/")
PredTarget <- "Burglary"
source("SetupGrid.R")
load("SpatialFeatureMap_Res660ft.RData")
source("SetupCrimeData.R")
source("SetupKernels.R")
source("PullRawData.R")
source("PullRawData.R")
source("PullRawData.R")
source("StructureData.R")
source("StructureData.R")
source("StructureData.R")
source("EvaluationFunction.R")
percentArea <- seq(0,1,length.out=21)
source("EvalHotspot.R")
source("TrainAndEvalClassifier.R")
source("PullRawData.R")
source("PullRawData.R")
WeatherData <- subset(WeatherData,Date>=CrimeData$DATEOCC[1]&Date<=CrimeData$DATEOCC[nrow(CrimeData)])
WeatherFilePath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Data/WeatherData/"
startDate.weather <- "01/01/2001"
endDate.weather <- "12/31/2014"
filename <- paste(WeatherFilePath,'WeatherData_Daily_',as.character(as.Date(startDate.weather, "%m/%d/%Y")),
'_',as.character(as.Date(endDate.weather, "%m/%d/%Y")),'.csv',sep='')
WeatherData <- read.csv(filename)
WeatherData$Date <- as.Date(WeatherData$Date)
WeatherData <- subset(WeatherData,Date>=CrimeData$DATEOCC[1]&Date<=CrimeData$DATEOCC[nrow(CrimeData)])
WeatherData <- GroupData(WeatherData,groupSize,startDate=WeatherData$Date[1],endDate=WeatherData$Date[nrow(WeatherData)])
head(WeatherData$GROUP)
WeatherData <- subset(WeatherData,select=c("GROUP",WeatherVar))
WeatherData.train <- subset(WeatherData,GROUP>=startGroup.train-window.t & GROUP<=endGroup.train)
WeatherData.test <- subset(WeatherData,GROUP>=startGroup.test-window.t & GROUP<=endGroup.test)
WeatherFilePath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Data/WeatherData/"
startDate.weather <- "01/01/2001"
endDate.weather <- "12/31/2014"
filename <- paste(WeatherFilePath,'WeatherData_Daily_',as.character(as.Date(startDate.weather, "%m/%d/%Y")),
'_',as.character(as.Date(endDate.weather, "%m/%d/%Y")),'.csv',sep='')
WeatherData <- read.csv(filename)
WeatherData$Date <- as.Date(WeatherData$Date)
WeatherData <- subset(WeatherData,Date>=CrimeData$DATEOCC[1]&Date<=CrimeData$DATEOCC[nrow(CrimeData)])
source("GroupData.R")
WeatherFilePath <- "/Users/xiaomuliu/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Data/WeatherData/"
startDate.weather <- "01/01/2001"
endDate.weather <- "12/31/2014"
filename <- paste(WeatherFilePath,'WeatherData_Daily_',as.character(as.Date(startDate.weather, "%m/%d/%Y")),
'_',as.character(as.Date(endDate.weather, "%m/%d/%Y")),'.csv',sep='')
WeatherData <- read.csv(filename)
WeatherData$Date <- as.Date(WeatherData$Date)
WeatherVar <- c("Tsfc_F_avg","Rh_PCT_avg","Psfc_MB_avg","CldCov_PCT_avg","Tapp_F_avg","Spd_MPH_avg","PcpPrevHr_IN")
# Match DATE in weather data and crime data
WeatherData <- subset(WeatherData,Date>=CrimeData$DATEOCC[1]&Date<=CrimeData$DATEOCC[nrow(CrimeData)])
WeatherData <- GroupData(WeatherData,groupSize,startDate=WeatherData$Date[1],endDate=WeatherData$Date[nrow(WeatherData)])
WeatherData <- subset(WeatherData,select=c("GROUP",WeatherVar))
WeatherData.train <- subset(WeatherData,GROUP>=startGroup.train-window.t & GROUP<=endGroup.train)
WeatherData.test <- subset(WeatherData,GROUP>=startGroup.test-window.t & GROUP<=endGroup.test)
rm(WeatherData)
invisible(gc(verbose=FALSE))
source("StructureData.R")
source("TrainAndEvalClassifier.R")
source("PlotEval.R")
source("StructureData.R")
source("PullRawData.R")
source("StructureData.R")
source("TrainAndEvalClassifier.R")
source("PlotEval.R")
source("TrainAndEvalClassifier.R")
source("TrainAndEvalClassifier.R")
warnings
warnings()
source("TrainAndEvalClassifier.R")
source("TrainAndEvalClassifier.R")
source("Classification.R")
# classifiers <- c("NB","LDA","LogReg","Lasso","RF","Adaboost","SVM","GAM","sNN","mNN","DBN","SAE")
classifiers <- c("mNN")
if ("GAM" %in% classifiers){
formula.part1 <- paste0("Label~",paste(VarName.call,sep="",collapse="+"))
formula.part2 <- paste("s(",c(VarName.space,VarName.STcrime,VarName.census,VarName.LTcrime),")",sep="",collapse="+")
gamFormula <- as.formula(paste0(formula.part1,"+",formula.part2))
}
if (any(c("DBN","SAE") %in% classifiers)){
spec <- "learningrate=0.8,momentum=0.3,learningrate_scale=0.5,output='sigm',numepochs=3,
batchsize=round(0.005*nrow(TrainData.sub)),hidden_dropout=0,visible_dropout=0,cd=1"
}else{
spec <- NULL
}
if ("SVM" %in% classifiers){
spec <- "cachesize=256,tolerance=0.05"
featureMeanDist <- mean(as.vector(dist(subset(TrainData.sub[sample(nrow(TrainData.sub),1000),],select=-c(Label)))))
}
if ("mNN" %in% classifiers){spec <- "stepmax=1e+03"}
funArgs <- list(NB="kfold=0,PCA=FALSE,keepPC=NULL",
LDA="kfold=0,PCA=FALSE,keepPC=NULL",
LogReg="kfold=0,PCA=FALSE,keepPC=NULL",
Lasso="kfold=10,lambda=NULL,NumLambda=15",
RF="kfold=0,NumVar=NULL,NumTree=NULL",
Adaboost="kfold=0,NumIter=NULL",
SVM=paste0("kfold=5,SVMkernel='rbf',Cseq=10^(seq(-1,0.5,by=0.5)),dSeq=NULL,
gammaSeq=1/featureMeanDist^2*10^seq(-1,1,by=0.5),",spec),
GAM="gamFormula=gamFormula",
sNN="kfold=5,NumUnit=seq(2,30,by=2),WgtDecaySeq=10^seq(-2,1,by=0.5)",
mNN=paste0("kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),",spec),
DBN=paste0("hiddenArch=c(100,50),",spec),
SAE=paste0("hiddenArch=c(100,50),",spec)
)
AUCary.cls <- matrix(0,nrow=length(classifiers),ncol=length(groupSeq.test))
TPRary.cls <- array(0,dim=c(length(classifiers),length(groupSeq.test),length(percentArea)))
m<-1
classObj <- Classification(TrainData.sub,TestData.sub,mNN,kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
pred <- compute(Model.cv, subset(TrainData[testIdx,],select=-Label))$net.result
Q
pred <- compute(Model.cv, subset(TrainData[testIdx,],select=-Label))$net.result
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
debugSource('~/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Code/Classification/Classification.R', echo=TRUE)
warnings()
formula.nn <- as.formula(paste("Label ~", paste(colnames(subset(TrainData,select=-Label)), collapse = " + ")))
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
debugSource('~/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Code/Classification/Classification.R', echo=TRUE)
source('~/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Code/Classification/Classification.R', echo=TRUE)
debugSource('~/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Code/Classification/Classification.R', echo=TRUE)
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
View(pred)
View(pred)
View(pred)
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
cc
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
View(CVtest.err)
Pred.test <- compute(Model, subset(TestData,select=-Label))$net.result
debugSource('~/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Code/Classification/Classification.R', echo=TRUE)
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
source('~/CrimeProject/SpatioTemporalModeling/PredictiveMapping/Code/Classification/Classification.R', echo=TRUE)
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
?compute
print(Model.cv)
formula.nn
str(subset(TrainData[testIdx,],select=-Label))
pred <- compute(Model.cv, subset(TrainData[testIdx,],select=-Label))$net.result
head(model.cv$weights)
head(Model.cv$weights)
?neuralnet
getAnywhere(neuralnet)
fixInNamespace("calculate.neuralnet", pos="package:neuralnet")
fixInNamespace("calculate.neuralnet", pos="package:neuralnet")
classObj <- Classification(TrainData.sub,TestData.sub,"mNN",kfold=5,hiddenArch=list(c(10,5),c(20,10),c(20,5)),stepmax=1000)
rm(list=ls(0))
rm(list=ls())
